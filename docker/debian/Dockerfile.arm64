# syntax=docker/dockerfile:1
FROM --platform=linux/arm64 rust:bullseye as builder
# Run apt updates and installs unattended.
ENV DEBIAN_FRONTEND=noninteractive

# Install aarch64 dependencies.
RUN apt update -y && apt -yq install qemu-user \
    gcc-aarch64-linux-gnu \
    libc6-dev-arm64-cross

# Get vSMTP.
RUN git clone -b main --single-branch https://github.com/viridIT/vSMTP.git
WORKDIR /vSMTP

# Install desired targets.
RUN rustup target add aarch64-unknown-linux-gnu

# Configure specific linker for arm64 architecture.
RUN echo '\
[target.aarch64-unknown-linux-gnu]\n\
linker = "aarch64-linux-gnu-gcc"\
' >>.cargo/config.toml

# Install fork of cargo deb.
RUN git clone https://github.com/viridIT/cargo-deb.git && cd cargo-deb && git checkout fix/changelog-path && cargo build --release && cd ..

# Package the app.
RUN ./cargo-deb/target/release/cargo-deb -p vsmtp -v --target=aarch64-unknown-linux-gnu

# Install and test vSMTP on arm64 arch.
FROM --platform=linux/arm64/v8 debian:bullseye as tester-aarch64
ENV DEBIAN_FRONTEND=noninteractive

COPY --from=builder /vSMTP/target/aarch64-unknown-linux-gnu/debian/*.deb ./vsmtp.deb

# https://piuparts.debian.org/doc/README.txt
RUN apt update -y && apt install -y piuparts

# piuparts installs the package in a chroot environment, thus I am unsure of the relevance of creating
# a new image to test the package. This will do for the time being.
CMD [ "piuparts", "vsmtp.deb" ]
